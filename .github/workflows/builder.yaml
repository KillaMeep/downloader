name: Build and Release

on:
  push:
    branches:
      - main
    paths:
      - 'downloader.py'

jobs:
  job_1:
    name: Build
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USERNAME }}"

      - name: Build
        run: |
          cd ${{ github.workspace }}
          pip install pipreqs
          mkdir Downloader
          copy downloader.py Downloader
          cd Downloader
          start /b "" cmd /c curl -L -s -o yt-dlp.exe https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp.exe
          start /b "" cmd /c pip install pipreqs && pipreqs && pip install -r requirements.txt && del /s /q requirements.txt && pip install termcolor
          pip install pyinstaller
          mkdir ffmpeg_install
          cd ffmpeg_install
          curl -s -o ffmpeg.zip https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-5.1.2-essentials_build.zip
          tar -xf ffmpeg.zip
          del /s /q ffmpeg.zip
          for /D %%i in (ffmpeg-*) do ren %%i ffmpeg
          move ffmpeg .. > nul
          cd ..
          rmdir /s /q ffmpeg_install
          cmd /c build.bat

      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with:
          name: downloader.exe
          path: downloader.exe

  job_2:
    name: Create Release
    needs: job_1
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.PUSH_TOKEN }}
      
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: downloader.exe
          path: ${{ github.workspace }}

      - name: Set up Git
        run: |
          git config --global user.email "${{ secrets.GIT_EMAIL }}"
          git config --global user.name "${{ secrets.GIT_USERNAME }}"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PUSH_TOKEN }}
        with:
          tag_name: "release-${{ github.run_number }}"
          release_name: "Release ${{ github.run_number }}"
          body: |
            This is an automated release.
          draft: false
          prerelease: false

      - name: Upload file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PUSH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ github.workspace }}/downloader.exe
          asset_name: downloader.exe
          asset_content_type: application/octet-stream
